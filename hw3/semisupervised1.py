'''Train a simple deep CNN on the CIFAR10 small images dataset.

GPU run command:
THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10_cnn.py
It gets down to 0.65 test logloss in 25 epochs, and down to 0.55 after 50 epochs.
(it's still underfitting at that point, though).

Note: the data was pickled with Python 2, and some encoding issues might prevent you
from loading it in Python 3. You might have to load it in Python 2,
save it in a different format, load it in Python 3 and repickle it.
'''

#from __future__ import print_function
import pickle
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD, Adam
from keras.utils import np_utils
import numpy as np
def data_split(X_train,Y_train, nVali):
    Xlen = len(X_train)
    Xshape = (Xlen - nVali, 3, 32, 32)
    Yshape = (Xlen - nVali, 10)
    xs = np.random.permutation(np.arange(len(X_train)))[:nVali]
    newX_train = np.zeros(Xshape, np.dtype('float32'))
    newY_train = np.zeros(Yshape)
    valiXShape = (nVali, 3, 32, 32)
    valiYShape = (nVali, 10)
    ValiX = np.zeros(valiXShape, np.dtype('float32'))
    ValiY = np.zeros(valiYShape)
    check = np.zeros((len(X_train)), np.dtype(bool))
    for x in xs:
        check[x] = 1
    count = 0
    countValData = 0
    for j in range(len(check)):
        if check[j] == False:
            newX_train[count] = X_train[j]
            newY_train[count] = Y_train[j]
            count += 1
        else:
            ValiX[countValData] = X_train[j]
            ValiY[countValData] = Y_train[j]
            countValData += 1
    X_train = newX_train
    Y_train = newY_train
    return (X_train,Y_train,ValiX,ValiY)
batch_size = 100 
nb_classes = 10
nb_epoch = 10
data_augmentation = True

# input image dimensions
img_rows, img_cols = 32, 32
# the CIFAR10 images are RGB
img_channels = 3

# the data, shuffled and split between train and test sets
label = pickle.load(open('./data/all_label.p','rb'))
label = np.array(label)
X_train = label.reshape(5000,3,32,32)
Y_train = []
for i in range(10):
	for j in range(500):
		Y_train.append(i)
# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(Y_train, 10)
X_train = X_train.astype('float32')
# X_test = X_test.astype('float32')
X_train /= 255
# X_test /= 255
model_path = 'm01.h5'
model = load_model(model_path)
X_TRAIN = X_train
Y_TRAIN = Y_train
print('Start to load unlabeled data...')
unlabel = pickle.load(open('./data/all_unlabel.p','rb'))
unlabel = np.reshape(unlabel,(45000,3,32,32))
unlabel = unlabel.astype('float32')
unlabel /= 255
History = []
print('unlabeled data loaded')
# this will do preprocessing and realtime data augmentation
datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images
for i in range(3):
    prediction = model.predict_proba(unlabel, batch_size=1000)
    check = np.zeros(len(unlabel),np.dtype(bool))
    for j in range(len(prediction)):
        if np.max(prediction[j]) > 0.9:
            check[j] = True
    Xlen = len(X_train)
    Xshape = (Xlen + np.sum(check),3,32,32)
    Yshape = (Xlen + np.sum(check),10)
    unlabelshape = (len(check) - np.sum(check),3,32,32)
    newX_train = np.zeros(Xshape, np.dtype('float32'))
    newY_train = np.zeros(Yshape)
    newUnlabel = np.zeros(unlabelshape, np.dtype('float32'))
    for j in range(Xlen):
        newX_train[j] = X_train[j]
        newY_train[j] = Y_train[j]
    count = Xlen
    countUnlabel = 0
    for j in range(len(check)):
        if check[j] == True:
            newX_train[count] = unlabel[j]
            newY_train[count][np.argmax(prediction[j])] = 1
            count += 1
        else:
            newUnlabel[countUnlabel] = unlabel[j]
            countUnlabel += 1
    X_train = newX_train
    Y_train = newY_train
    unlabel = newUnlabel
    print('add', np.sum(check),'data to training set.')
    print('Using real-time data augmentation.')
    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    # datagen.fit(x_train)

    # fit the model on the batches generated by datagen.flow()
    (x_train, y_train, Valix, Valiy) = data_split(X_train,Y_train, int(len(X_train)*0.01))
    history = model.fit_generator(datagen.flow(x_train, y_train,
                                  batch_size=batch_size),
                                  samples_per_epoch=x_train.shape[0],
                                  nb_epoch=nb_epoch,
                                  validation_data=(Valix, Valiy))
    History.append(history)
    (x_train, y_train, Valix, Valiy) = data_split(X_TRAIN,Y_TRAIN, 100)
    history = model.fit_generator(datagen.flow(x_train, y_train,
                                  batch_size=batch_size),
                                  samples_per_epoch=x_train.shape[0],
                                  nb_epoch=nb_epoch,
                                  validation_data=(Valix, Valiy))
    History.append(history)
# save model
#model_path = 'semisupervised.h5'
#model.save(model_path)
